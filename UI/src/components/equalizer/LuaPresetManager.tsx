import React, { useState, useEffect } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Loader2, FileText, Play, Download } from "lucide-react";
import { audioService } from "@/lib/audioService";

interface LuaPreset {
  name: string;
  description?: string;
  bands?: Array<{
    frequency: number;
    gain: number;
    q: number;
  }>;
  params?: {
    width: number;
    decay: number;
    damping: number;
    mix: number;
  };
}

interface LuaPresetManagerProps {
  className?: string;
}

export const LuaPresetManager: React.FC<LuaPresetManagerProps> = ({
  className,
}) => {
  const [equalizerPresets, setEqualizerPresets] = useState<LuaPreset[]>([]);
  const [spatializerPresets, setSpatializerPresets] = useState<LuaPreset[]>([]);
  const [loading, setLoading] = useState(false);
  const [activePreset, setActivePreset] = useState<string | null>(null);

  // Load Lua presets on component mount
  useEffect(() => {
    loadLuaPresets();
  }, []);

  const loadLuaPresets = async () => {
    setLoading(true);
    try {
      // Load both types of presets
      const [eqPresets, spatialPresets] = await Promise.all([
        audioService.loadLuaPresets('equalizer'),
        audioService.loadLuaPresets('spatializer')
      ]);

      setEqualizerPresets(eqPresets);
      setSpatializerPresets(spatialPresets);
      
      console.log('Loaded equalizer presets:', eqPresets);
      console.log('Loaded spatializer presets:', spatialPresets);
    } catch (error) {
      console.error('Failed to load Lua presets:', error);
    } finally {
      setLoading(false);
    }
  };

  const applyPreset = async (preset: LuaPreset, type: 'equalizer' | 'spatializer') => {
    try {
      const success = await audioService.applyLuaPreset(type, preset);
      if (success) {
        setActivePreset(preset.name);
        console.log(`Applied ${type} preset:`, preset.name);
      }
    } catch (error) {
      console.error(`Failed to apply ${type} preset:`, error);
    }
  };

  const exportPreset = (preset: LuaPreset, type: 'equalizer' | 'spatializer') => {
    // Create a downloadable Lua file
    let luaContent = '';
    
    if (type === 'equalizer') {
      luaContent = `-- ${preset.name} Equalizer Preset\n`;
      luaContent += `-- Generated by Super Dribble\n\n`;
      luaContent += `preset = {\n`;
      luaContent += `  name = "${preset.name}",\n`;
      if (preset.description) {
        luaContent += `  description = "${preset.description}",\n`;
      }
      luaContent += `  bands = {\n`;
      preset.bands?.forEach((band, index) => {
        luaContent += `    { frequency = ${band.frequency}, gain = ${band.gain}, q = ${band.q} }`;
        if (index < (preset.bands?.length || 0) - 1) luaContent += ',';
        luaContent += '\n';
      });
      luaContent += `  }\n}`;
    } else {
      luaContent = `-- ${preset.name} Spatializer Preset\n`;
      luaContent += `-- Generated by Super Dribble\n\n`;
      luaContent += `spatial_preset = {\n`;
      luaContent += `  name = "${preset.name}",\n`;
      if (preset.description) {
        luaContent += `  description = "${preset.description}",\n`;
      }
      luaContent += `  params = {\n`;
      if (preset.params) {
        luaContent += `    width = ${preset.params.width},\n`;
        luaContent += `    decay = ${preset.params.decay},\n`;
        luaContent += `    damping = ${preset.params.damping},\n`;
        luaContent += `    mix = ${preset.params.mix}\n`;
      }
      luaContent += `  }\n}`;
    }

    // Create and download file
    const blob = new Blob([luaContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${preset.name.toLowerCase().replace(/\s+/g, '_')}_${type}.lua`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className={cn("space-y-6", className)}>
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-eq-text">Lua Presets</h3>
        <Button
          variant="outline"
          size="sm"
          onClick={loadLuaPresets}
          disabled={loading}
          className="text-eq-text-dim hover:text-eq-accent"
        >
          {loading ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            <FileText className="h-4 w-4" />
          )}
          <span className="ml-2">Reload</span>
        </Button>
      </div>

      {/* Equalizer Presets */}
      <Card className="bg-eq-surface border-eq-border">
        <CardHeader>
          <CardTitle className="text-eq-text text-base">Equalizer Presets</CardTitle>
        </CardHeader>
        <CardContent>
          {equalizerPresets.length === 0 ? (
            <p className="text-eq-text-dim text-sm">No equalizer presets found</p>
          ) : (
            <div className="space-y-2">
              {equalizerPresets.map((preset, index) => (
                <div
                  key={index}
                  className={cn(
                    "flex items-center justify-between p-3 rounded-lg border",
                    activePreset === preset.name
                      ? "bg-eq-accent/10 border-eq-accent"
                      : "bg-eq-surface-light border-eq-border"
                  )}
                >
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-eq-text">{preset.name}</span>
                      {activePreset === preset.name && (
                        <Badge variant="secondary" className="text-xs">
                          Active
                        </Badge>
                      )}
                    </div>
                    {preset.description && (
                      <p className="text-sm text-eq-text-dim mt-1">{preset.description}</p>
                    )}
                    {preset.bands && (
                      <p className="text-xs text-eq-text-dim mt-1">
                        {preset.bands.length} bands
                      </p>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => applyPreset(preset, 'equalizer')}
                      className="text-eq-text-dim hover:text-eq-accent"
                    >
                      <Play className="h-3 w-3" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => exportPreset(preset, 'equalizer')}
                      className="text-eq-text-dim hover:text-eq-accent"
                    >
                      <Download className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Spatializer Presets */}
      <Card className="bg-eq-surface border-eq-border">
        <CardHeader>
          <CardTitle className="text-eq-text text-base">Spatializer Presets</CardTitle>
        </CardHeader>
        <CardContent>
          {spatializerPresets.length === 0 ? (
            <p className="text-eq-text-dim text-sm">No spatializer presets found</p>
          ) : (
            <div className="space-y-2">
              {spatializerPresets.map((preset, index) => (
                <div
                  key={index}
                  className={cn(
                    "flex items-center justify-between p-3 rounded-lg border",
                    activePreset === preset.name
                      ? "bg-eq-accent/10 border-eq-accent"
                      : "bg-eq-surface-light border-eq-border"
                  )}
                >
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-eq-text">{preset.name}</span>
                      {activePreset === preset.name && (
                        <Badge variant="secondary" className="text-xs">
                          Active
                        </Badge>
                      )}
                    </div>
                    {preset.description && (
                      <p className="text-sm text-eq-text-dim mt-1">{preset.description}</p>
                    )}
                    {preset.params && (
                      <p className="text-xs text-eq-text-dim mt-1">
                        Width: {preset.params.width}, Decay: {preset.params.decay}
                      </p>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => applyPreset(preset, 'spatializer')}
                      className="text-eq-text-dim hover:text-eq-accent"
                    >
                      <Play className="h-3 w-3" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => exportPreset(preset, 'spatializer')}
                      className="text-eq-text-dim hover:text-eq-accent"
                    >
                      <Download className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};
